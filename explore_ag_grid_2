


import streamlit as st
import numpy as np
import pandas as pd

from st_aggrid import AgGrid, GridOptionsBuilder, JsCode


@st.cache_data()
def get_data():
    df = pd.DataFrame(
        np.random.randint(0, 100, 50).reshape(-1, 5), columns=list("abcde")
    )
    return df


st.subheader("Controling Ag-Grid redraw in Streamlit.")
st.markdown(
    """
The grid will redraw itself and reload the data whenever the key of the component changes.  
If ```key=None``` or not set at all, streamlit will compute a hash from AgGrid() parameters to use as a unique key.  
This can be simulated by changing the grid height, for instance, with the slider:
"""
)

c1, _ = st.columns([3, 2])

height = c1.slider("Height (px)", min_value=100, max_value=800, value=400)

st.markdown(
    """
As there is no key parameter set, whenever the height parameter changes grid is redrawn.  
This behavior can be prevented by setting a fixed key on aggrid call (check the box below):  
"""
)

use_fixed_key = st.checkbox("Use fixed key in AgGrid call", value=False)
if use_fixed_key:
    key = "'[TRIAL]_this_{AG_Charts_and_AG_Grid}_Enterprise_key_{AG-104792}_is_granted_for_evaluation_only___Use_in_production_is_not_permitted___Please_report_misuse_to_legal@ag-grid.com___For_help_with_purchasing_a_production_key_please_contact_info@ag-grid.com___You_are_granted_a_{Single_Application}_Developer_License_for_one_application_only___All_Front-End_JavaScript_developers_working_on_the_application_would_need_to_be_licensed___This_key_will_deactivate_on_{14 November 2025}____[v3]_[0102]_MTc2MzA3ODQwMDAwMA==4ecc55839c14ac311390c0d41b27422a'"
else:
    key = None

st.markdown(
    f"""
However, blocking redraw, also blocks grid from rendering new data, unless the ```reload_data```  parameter is set to true.  
(note that grid return value shows new data, however as redraw is blocked grid does not show the new values)
"""
)
reload_data = False
c1, c2, _ = st.columns([1, 2, 1])
button = c1.button("Generate 10 new random lines of data")
reload_data_option = c2.checkbox(
    "Set reload_data as true on next app refresh.", value=False
)

if button:
    st.cache_data.clear()
    if reload_data_option:
        reload_data = True


key_md = ", key=None" if not key else f",key={key}"
st.markdown(
    f"""
Grid call below is:
```python
AgGrid(data, grid_options, {key_md}, reload_data={reload_data}, height={height})
```"""
)


data = get_data()
gb = GridOptionsBuilder.from_dataframe(data)

data["id"] = data.index

# make all columns editable
gb.configure_columns(
    list("abcde"), editable=True, cellRenderer="agAnimateShowChangeCellRenderer"
)

# Create a calculated column that updates when data is edited. Use agAnimateShowChangeCellRenderer to show changes
# gb.configure_column('row total', valueGetter='Number(data.a) + Number(data.b) + Number(data.c) + Number(data.d) + Number(data.e)', cellRenderer='agAnimateShowChangeCellRenderer', editable='false', type=['numericColumn'])
go = gb.build()

go["getRowId"] = JsCode("""function (params) { return params.data.id; }""")

if st.button("randomize"):
    import random

    for i in range(10):
        x, y, v = (
            random.randint(0, data.shape[0] - 1),
            random.randint(0, data.shape[1] - 1),
            random.randint(10000, 100000),
        )
        # st.write(x,y,v, data.shape)
        data.iloc[x, y] = v

# Setting a fixed key for the component will prevent the grid to reinitialize when dataframe parameter change, simulated here
# by pressing the button on the side bar.
# Data will only be refreshed when the parameter reload_data is set to True

if use_fixed_key:
    ag = AgGrid(
        data,
        gridOptions=go,
        height=height,
        fit_columns_on_grid_load=True,
        key="an_unique_key",
        reload_data=reload_data,
        allow_unsafe_jscode=True,
    )
else:
    ag = AgGrid(data, gridOptions=go, height=height, fit_columns_on_grid_load=True)

st.subheader("Returned Data")
st.dataframe(ag["data"])

st.subheader("Grid Options")
st.write(go)



"""


# Import python packages
import streamlit as st
from snowflake.snowpark.context import get_active_session
import streamlit as st
from st_aggrid import AgGrid, GridOptionsBuilder



# ---------------- Caching ----------------
@st.cache_data(ttl=600)
def load_treasury_data(_session):
    return _session.sql("SELECT * FROM TREASURY.GENERAL.SEC_MASTER_TREASURIES_CURVE  LIMIT 500").to_pandas()

session = get_active_session()
df = load_treasury_data(session)

# Configure AG Grid with enterprise features
gb = GridOptionsBuilder.from_dataframe(df)
gb.configure_default_column(groupable=True, editable=True, enableValue=True, enableRowGroup=True, aggFunc='sum')
gb.configure_side_bar()  # Enables enterprise sidebar
gb.configure_selection('multiple', use_checkbox=True)
gb.configure_pagination(paginationAutoPageSize=True)
grid_options = gb.build()

# Display AG Grid
st.title("Treasury Residuals Explorer")
AgGrid(
    df,
    gridOptions=grid_options,
    enable_enterprise_modules=True,
    allow_unsafe_jscode=True,
    update_mode='MODEL_CHANGED'
)
"""



